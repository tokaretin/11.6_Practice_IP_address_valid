#include <iostream>
#include <string>

using namespace std;

/*Функция checkChars используется для проверки корректности символов в 
строке str, представляющей IP-адрес.

Вначале функция инициализирует переменные countDot и flag. countDot 
отвечает за количество точек в IP-адресе, а flag будет использоваться 
для проверки наличия нескольких точек подряд в IP-адресе.

Затем функция проходится циклом по символам в строке str. Если текущий 
символ равен точке (.), увеличиваем countDot на единицу, и если флаг flag 
установлен, то возвращаем false. Если текущий символ не является цифрой 
или находится вне диапазона от 0 до 9, то возвращаем false. Если условия 
не нарушены, то устанавливаем flag в false.

В конце, если количество точек равно трем, то функция возвращает true, 
в противном случае - false.*/
bool checkChars(string str) {
    int countDot = 0;
    bool flag = false;
    if (str[0] == '.' || str[str.length() - 1] == '.')return false;
    for (int i = 0; i < str.length(); i++) {
        if (str[i] == '.') {
            countDot++;
            if (flag) return false;
            flag = true;
        }
        else if (str[i] < '0' || str[i] > '9') {
            return false;
        }
        else {
            flag = false;
        }
    }
    return (countDot == 3 ? true : false);
}

/*subStr - это функция, которая возвращает подстроку из строки str, 
начиная с индекса begin и заканчивая индексом end - 1.

Код функции subStr состоит из создания временной строки tmpStr и 
копирования символов из str в tmpStr, начиная с индекса begin и до 
индекса end - 1. Затем временная строка tmpStr возвращается в качестве 
результата.

В целом, эта функция аналогична методу substr в стандартной библиотеке C++.*/
string subStr(string str, int begin, int end) {
    string tmpStr;
    for (int i = begin; i < end; i++) {
        tmpStr += str[i];
    }
    return tmpStr;
}

/*Функция partCheck проверяет, является ли подстрока str корректным
октетом IP-адреса.

Сначала функция проверяет, что длина строки str не превышает 3 символа, 
так как максимальное значение октета IP-адреса равно 255. Если длина больше 
трех символов, то октет некорректен и функция возвращает false.

Затем функция проверяет, что первый символ не является нулем, если длина 
строки больше 1. Это необходимо для того, чтобы исключить ведущие нули, 
которые не влияют на значение октета, но могут ввести в заблуждение при 
парсинге.

Затем функция преобразует строку str в число с помощью функции stoi и 
проверяет, что полученное число находится в диапазоне от 0 до 255. Если 
число выходит за пределы этого диапазона, то октет некорректен и функция 
возвращает false.

Если проверки пройдены успешно, то функция возвращает true, что означает, 
что октет является корректным.*/
bool partCheck(string str) {
    if (str.length() > 3) return false;
    if (str.length() > 1 && str[0] == '0') return false;
    if (stoi(str) > 255 || stoi(str) < 0) return false;

    return true;
}

/*Данная функция indexChar() принимает два аргумента: строку str 
и символ ch. Она выполняет поиск позиции первого вхождения символа 
ch в строку str, начиная с первого символа и до конца строки. Если 
символ ch не найден, то возвращается значение -1.

В цикле for происходит перебор каждого символа строки str. Если 
встретился символ ch, то позиция этого символа сохраняется в переменную 
result и возвращается. Если символ ch не найден, то возвращается -1.*/
int indexChar(string str, char ch) {
    int result = -1;
    for (int i = 0; i < str.length(); i++) {
        if (str[i] == ch) return i;
    }
    return result;
}

/*Данная функция проверяет, является ли заданная строка str 
правильным IP-адресом. Она использует две вспомогательные функции: 
checkChars и partCheck.

Функция checkChars проверяет, содержит ли строка только допустимые 
символы для IP-адреса (цифры и точки). Если в строке есть любой другой 
символ, функция вернет false.

Функция partCheck проверяет, является ли отдельная часть IP-адреса 
(октет) правильным числом. Для этого она сначала проверяет длину 
октета (не больше 3 символов). Затем она проверяет, что первый символ 
октета не равен нулю, если длина октета больше 1. Наконец, она 
преобразует октет в целое число и проверяет, что оно находится в диапазоне от 0 до 255.

В основной части функции checkIp строка str дополняется точкой, 
чтобы обеспечить правильный формат IP-адреса. Затем она проверяет 
каждый отдельный октет, используя функцию partCheck, и удаляет 
проверенные символы из строки str. Если все октеты проходят проверку 
и остается только точка в конце строки str, то функция вернет true, 
в противном случае - false.*/
bool checkIp(string str) {
    if (!checkChars(str)) return false;
    str += '.';
    for (int i = 0; i < 4; i++) {
        if (!partCheck(subStr(str, 0, indexChar(str, '.')))) return false;
        str = subStr(str, indexChar(str, '.') + 1, str.length());
    }
    return true;
}


int main()
{
    cout << "Enter the IP address: ";
    string ip;
    cin >> ip;
    cout << endl << (checkIp(ip) ? "Valid" : "Invalid") << endl;

    return 0;
}
